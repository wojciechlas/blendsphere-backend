from pocketbase.models import Record
from pydantic_ai import Agent

from src.agent.request_builder import build_flashcard_request

class FlashcardAgent:

    def __init__(self):
        system_prompt = f"""You are a language learning assistant. You will help students to learn a foreign language by providing flashcards.
            Your task is to create a list of flashcards based on the provided template.
            The template is in JSON format and contains the following fields:
            - "nativeLanguage": native language of the student, as ISO 639 language code, e.g. "pl" for Polish
            - "learningLanguage": learning language, as ISO 639 language code, e.g. "it" for Italian
            - "languageLevel": language level of the student, e.g. "A1", "B2", "C1". Field's value should be generated based on the language level
            - "example": example of the fields of the flashcard to generate
            - "fields": list of fields to generate for each flashcard, each field has the following properties:
              - "id": numerical id of the field, e.g. 1, 2, 234
              - "type": type of the field, e.g. "text", "image", "audio"
              - "isInput": true if the field is input field, false if it is output field and should be generated by the assistant
              - "language": value of the field should be in this language, as ISO 639 language code, e.g. "pl" for Polish, "it" for Italian
              - "label": label of the field
              - "description": description of the field, e.g. "The word or phrase", "The translation of the phrase", "An example sentence using the phrase". Describes what should be in the field's value
              - "inputs": list of inputs, you should generate a flashcard for each input
            Your response should be in JSON format and contain only the following fields:
            - "flashcards": list of flashcards, each flashcard should contain a list of fields, each field should have the following properties:
              - "id": id of the field (same as in the template)
              - "value": value of the field, generated based on the template and inputs
            """

        self.agent = Agent(
            model="google-gla:gemini-2.0-flash",
            system_prompt=system_prompt
        )

    async def generate_flashcards(self, request, template: Record, template_fields):
        flashcard_request = build_flashcard_request(template, template_fields)
        response = await self.agent.run(flashcard_request.safe_substitute(inputs=request.words))

        return response.output